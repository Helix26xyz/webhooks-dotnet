@page "/"
@page "/webhooks"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]
@rendermode InteractiveServer

@using webhooks.ApiService.src.models
@inject WebhookApiClient WebhookApi
@inject IJSRuntime JSRuntime

<PageTitle>Webhooks</PageTitle>

<h3>Webhooks</h3>

<button class="btn btn-secondary" @onclick="RefreshWebhooks">Refresh</button>
<button class="btn btn-primary" @onclick="ToggleNewWebhookFormVisibility">Add New Webhook</button>

@if (isNewWebhookFormVisible)
{
    <h4>Add New Webhook</h4>
    <EditForm Model="newWebhook" OnValidSubmit="AddWebhook">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="newWebhook.Name" />
        </div>
        <div class="form-group">
            <label for="slug">Slug</label>
            <InputText id="slug" class="form-control" @bind-Value="newWebhook.Slug" />
        </div>
        <div class="form-group">
            <label for="url">Url</label>
            <InputText id="url" class="form-control" @bind-Value="newWebhook.Url" />
        </div>
        <div class="form-group">
            <label for="createdBy">Created By</label>
            <InputText id="createdBy" class="form-control" @bind-Value="newWebhook.CreatedBy" />
        </div>
        <div class="form-group">
            <label for="owner">Owner</label>
            <InputText id="owner" class="form-control" @bind-Value="newWebhook.Owner" />
        </div>
        <div class="form-group">
            <label for="project">Project</label>
            <InputText id="project" class="form-control" @bind-Value="newWebhook.Project" />
        </div>
        <div class="form-group">
            <label for="status">Status</label>
            <InputSelect id="status" class="form-control" @bind-Value="newWebhook.Status">
                <option value="1">Enabled</option>
                <option value="2">Disabled</option>
                <option value="3">Suspended</option>
            </InputSelect>
        </div>
        <button type="submit" class="btn btn-primary">Add Webhook</button>
    </EditForm>
}
@if (webhooks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Slug</th>
                <th>Url</th>
                <th>Created At</th>
                <th>Created By</th>
                <th>Owner</th>
                <th>Project</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var webhook in webhooks)
            {
                <tr>
                    <td>@webhook.Name</td>
                    <td>@webhook.Slug</td>
                    <td>@webhook.Url</td>
                    <td>@webhook.CreatedAt</td>
                    <td>@webhook.CreatedBy</td>
                    <td>@webhook.Owner</td>
                    <td>@webhook.Project</td>
                    <td>
                        <InputSelect placeholder="webhook"
                        @bind-Value="webhook.Status"
                                     @bind-Value:after="() => OnWebhookStatusChange(webhook, __value)">
                        @foreach (var status in Enum.GetValues<WebhookStatus>())
                            {
                                <option value="@status">@status</option>
                            }
                        </InputSelect>


                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => OnWebhookClick(webhook)">View Events</button>
                        <button class="btn btn-danger" @onclick="() => DeleteWebhook(webhook.Id)">Delete</button>
                        @if (pendingStatusUpdates.ContainsKey(webhook.Id))
                        {
                            <button class="btn btn-success" @onclick="() => UpdateWebhookStatus(webhook)">Update</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (webhookEvents == null)
{
}
else if (!webhookEvents.Any())
{
    <p><em>No events to display.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>WebhookId</th>
                <th>Created At</th>
                <th>Payload</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var webhookevent in webhookEvents)
            {
                <tr>
                    <td>@webhookevent.Id</td>
                    <td>@webhookevent.WebhookId</td>
                    <td>@webhookevent.CreatedAt</td>
                    <td>@webhookevent.Payload</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Webhook> webhooks = new List<Webhook>();
    private Webhook? selectedWebhook;
    private List<WebhookEvent> webhookEvents = new List<WebhookEvent>();
    private Webhook newWebhook = new Webhook();
    private bool isNewWebhookFormVisible = false;
    private Dictionary<Guid, WebhookStatus> pendingStatusUpdates = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadWebhooks();
    }

    private async Task LoadWebhooks()
    {
        var webhooksArray = await WebhookApi.GetWebhooksAsync();
        webhooks = webhooksArray.ToList();
    }

    private async Task RefreshWebhooks()
    {
        await LoadWebhooks();
        StateHasChanged(); // Ensure the component re-renders
    }

    private async Task AddWebhook()
    {
        newWebhook.CreatedAt = DateTime.UtcNow;
        await WebhookApi.AddWebhookAsync(newWebhook);
        await LoadWebhooks();
        newWebhook = new Webhook(); // Reset the form
        StateHasChanged(); // Ensure the component re-renders
    }
    private async Task DeleteWebhook(Guid webhookId)
    {
        await WebhookApi.DeleteWebhookAsync(webhookId);
        await LoadWebhooks();
    }
    private void OnWebhookStatusChange(Webhook webhook, WebhookStatus newStatus)
    {
        pendingStatusUpdates[webhook.Id] = newStatus;
        webhook.Status = newStatus;
        StateHasChanged(); // Ensure the component re-renders
    }

    private async Task UpdateWebhookStatus(Webhook webhook)
    {
        if (pendingStatusUpdates.TryGetValue(webhook.Id, out var newStatus))
        {
            webhook.Status = newStatus;
            await WebhookApi.UpdateWebhookAsync(webhook);
            pendingStatusUpdates.Remove(webhook.Id);
            StateHasChanged(); // Ensure the component re-renders
        }
    }
    private void ToggleNewWebhookFormVisibility()
    {
        isNewWebhookFormVisible = !isNewWebhookFormVisible;
    }
    async Task OnWebhookClick(Webhook webhook)
    {
        selectedWebhook = webhook;
        var webhookEventsArray = await WebhookApi.GetWebhookEventsForWebhookAsync(webhook.Id.ToString(), 50);
        webhookEvents = webhookEventsArray.ToList();
        StateHasChanged(); // Ensure the component re-renders
    }
}
