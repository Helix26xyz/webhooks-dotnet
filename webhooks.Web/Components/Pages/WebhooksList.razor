@page "/webhooks"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@using webhooks.ApiService.src.models
@inject WebhookApiClient WebhookApi
@inject IJSRuntime JSRuntime

<PageTitle>Weather</PageTitle>

<h3>Webhooks</h3>

@if (webhooks == null)
{
    <p><em>Loading...</em></p>
}
else{
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Slug</th>
            <th>Url</th>
            <th>Created At</th>
            <th>Created By</th>
            <th>Owner</th>
            <th>Project</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var webhook in webhooks)
        {
                <tr>
                    <td></td>
                    <td>@webhook.Slug</td>
                    <td>@webhook.Url</td>
                    <td>@webhook.CreatedAt</td>
                    <td>@webhook.CreatedBy</td>
                    <td>@webhook.Owner</td>
                    <td>@webhook.Project</td>
                    <td>@webhook.Status</td>
                </tr>
        }
    </tbody>
</table>
}
@code {
    private List<Webhook> webhooks = new List<Webhook>();
    private Webhook? selectedWebhook;
    private List<WebhookEvent> webhookEvents = new List<WebhookEvent>();
    private Webhook newWebhook = new Webhook();

    protected override async Task OnInitializedAsync()
    {
        var webhooksArray = await WebhookApi.GetWebhooksAsync();
        webhooks = webhooksArray.ToList();
    }

    private async Task OnWebhookClick(Webhook webhook)
    {
        selectedWebhook = webhook;
        var webhookEventsArray = await WebhookApi.GetWebhookEventsForWebhookAsync(webhook.Id.ToString());
        webhookEvents = webhookEventsArray.ToList();
        StateHasChanged(); // Ensure the component re-renders
    }
}
